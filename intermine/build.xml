<project name="intermine" default="help" basedir=".">
  <description>InterMine build file</description>

  <!-- Property setup targets -->
  <!-- buildtime and runtime settings -->
  <property name="build.properties.local" value="${user.home}/build.properties.${ant.project.name}" />

  <property file="${build.properties.local}"/>
  <property file="build.properties"/>

  <property name="runtime.properties.local" value="${user.home}/${ant.project.name}.properties" />

  <!-- used by build-model.xml -->
  <property name="namespace" value="http://www.intermine.org/model"/>

  <!-- used by build-model.xml -->
  <property name="packagename" value="org.intermine.model"/>

  <!-- libraries and binaries -->
  <property name="lib" location="lib"/>
  <property name="bin" location="bin"/>

  <!-- source directories -->
  <property name="src" location="src"/>
  <property name="src.java" location="${src}/java"/>
  <property name="src.test" location="${src}/test"/>
  <property name="src.webapp" location="${src}/web"/>

  <!-- resources directory -->
  <property name="resources" location="resources"/>

  <!-- model directory -->
  <property name="model" location="model"/>

  <!-- build directories -->
  <property name="build" location="build"/>
  <property name="build.java" location="${build}/java"/>
  <property name="build.resources" location="${build}/resources"/>
  <property name="build.resources.test" location="${build}/resources/test"/>
  <property name="build.test" location="${build}/test"/>
  <property name="build.model" location="${build}/model" />
  <property name="build.src.java" location="${build}/javasrc"/>
  <property name="build.src.test" location="${build}/testsrc"/>
  <property name="build.javadoc" location="${build}/api"/>
  <property name="build.webapp" location="${build}/webapp"/>
  <property name="build.tmp" location="${build}/tmp"/>

  <!-- tutorial directory -->
  <property name="tutorial" location="${build}/tutorial"/>

  <!-- results directories -->
  <property name="results"  location="results"/>
  <property name="results.junit"  location="${results}/junit"/>
  <property name="results.checkstyle"  location="${results}/checkstyle"/>
  <property name="results.antdoc" location="${results}/antdoc"/>

  <!-- distributable directories -->
  <property name="dist"  location="dist"/>
  <property name="dist.webapp"  location="${dist}/webapp"/>
  <property name="dist.javadoc"  location="${dist}/api"/>

  <!-- set up library filesets -->

  <!-- Libraries that everything needs -->
  <patternset id="lib.common">
    <include name="ant*.jar"/>
    <include name="castor*.jar" />
    <include name="cglib*.jar" />
    <include name="commons-collections*.jar" />
    <include name="commons-dbcp*.jar" />
    <include name="commons-lang*.jar" />
    <include name="commons-logging*.jar" />
    <include name="commons-pool*.jar" />
    <include name="commons-digester*.jar" />
    <include name="commons-beanutils*.jar" />
    <include name="icu4j*.jar"/>
    <include name="jakarta-oro*.jar"/>
    <include name="jena*.jar" />
    <include name="libreadline-java*.jar" />
    <include name="log4j*.jar" />
    <include name="mysql*.jar" />
    <include name="p6spy.jar"/>
    <include name="postgresql*.jar" />
    <include name="torque*.jar" />
    <include name="velocity*.jar" />
    <include name="xerces*.jar"/>
    <include name="stax*.jar"/>
    <include name="xml-apis*.jar"/>
  </patternset>

  <!-- Ant tasks and unit testing stuff -->
  <patternset id="lib.build">
    <include name="AntDoc*.jar" />
    <include name="junit*.jar" />
    <include name="mockobjects*.jar" />
    <include name="nsuml*.jar" />
    <include name="xmlunit*.jar" />
    <include name="stax*.jar"/>
  </patternset>

  <patternset id="lib.catalina">
    <include name="catalina-ant*.jar" />
  </patternset>

  <!-- Libraries relevant to building from UML models -->
  <patternset id="lib.uml">
    <include name="nsuml*.jar" />
  </patternset>
  

  <!-- Libraries relevant to building from AceDB models and data -->
  <patternset id="lib.acedb">
    <include name="acedb*.jar" />
    <include name="biojava*.jar" />
  </patternset>

  <!-- Antlr library -->
  <patternset id="lib.antlr">
    <include name="antlr*.jar"/>
  </patternset>

  <!-- Checkstyle library -->
  <patternset id="lib.checkstyle">
    <include name="checkstyle*.jar"/>
  </patternset>

  <!-- Libraries that both the webapps use -->
  <patternset id="lib.webapp.common">
    <!-- Minimal stuff essential to run intermine -->
    <include name="postgresql*.jar"/>
    <include name="log4j*.jar"/>
    <include name="cglib*.jar"/>
    <include name="antlr*.jar"/>
    <include name="commons-lang*.jar"/>
    <include name="commons-logging*.jar"/>
    <include name="torque-gen*.jar"/>
    <include name="stax*.jar"/>
    <!-- Stuff for webapps -->
    <include name="commons-digester*.jar"/>
    <include name="commons-collections*.jar"/>
    <include name="commons-beanutils*.jar"/>
    <include name="lucene*.jar"/>
    <include name="snowball*.jar"/>
  </patternset>

  <!-- Libraries that the webapp uses -->
  <patternset id="lib.webapp.intermine">
    <include name="jstl*.jar"/>
    <include name="servlet*.jar"/>
    <include name="standard*.jar"/>
    <include name="struts*.jar"/>
    <include name="mail*.jar"/>
    <include name="activation*.jar"/>
    <include name="poi*.jar"/>
    <include name="commons-fileupload*.jar"/>
    <include name="commons-validator*.jar"/>
  </patternset>

  <!-- Libraries that the webservice uses -->
  <patternset id="lib.webapp.webservice">
    <include name="commons-discovery*.jar"/>
    <include name="axis*.jar"/>
    <include name="saaj*.jar"/>
    <include name="jaxrpc*.jar"/>
    <include name="wsdl4j*.jar"/>
    <include name="libreadline-java*.jar"/>
  </patternset>

  <!-- set the classpath for the build - basically everything in lib -->
  <path id="base.class.path">
    <pathelement path="${build.java}"/>
    <pathelement path="${build.resources}"/>
    <fileset dir="${lib}">
      <patternset refid="lib.common"/>
      <patternset refid="lib.build"/>
      <patternset refid="lib.catalina"/>
      <patternset refid="lib.webapp.common"/>
      <patternset refid="lib.webapp.intermine"/>
      <patternset refid="lib.webapp.webservice"/>
      <patternset refid="lib.acedb"/>
      <patternset refid="lib.uml"/>
    </fileset>
  </path>

  <path id="project.class.path">
    <path refid="base.class.path"/>
    <fileset dir="${lib}">
      <patternset refid="lib.antlr"/>
    </fileset>
    <pathelement location="${build.model}/datatracking"/>
    <pathelement location="${build.model}/fulldata"/>
    <pathelement location="${build.model}/userprofile"/>
  </path>

  <path id="checkstyle.class.path">
    <fileset dir="${lib}">
      <patternset refid="lib.checkstyle"/>
    </fileset>
  </path>

  <path id="test.class.path">
    <path refid="project.class.path"/>
    <pathelement path="${build.resources.test}"/>
    <pathelement location="${build.test}"/>
    <pathelement location="${build.model}/testmodel"/>
    <pathelement location="${build.model}/acedbtest"/>
    <pathelement location="${build.model}/xmitest"/>
    <pathelement location="${build.model}/xmlschematest"/>
    <pathelement location="${build.model}/test"/>
    
  </path>

  <path id="acedbtest.class.path">
    <path refid="project.class.path"/>
    <pathelement location="${build.model}/acedbtest"/>
  </path>

  <path id="webapptest.class.path">
    <path refid="test.class.path"/>
    <fileset dir="${dist.webapp}">
      <include name="intermine.war"/>
    </fileset>
  </path>
  
  <path id="debug.src.path">
    <pathelement path="${src.java}"/>
    <pathelement path="${src.webapp}"/>
  </path>

  <!-- Initialisation targets -->

  <target name="prepare">
    <tstamp>
      <format property="YEAR" pattern="yyyy"/>
      <format property="DTSTAMP" pattern="yyyyMMddHHmm"/>
    </tstamp>
    
    <mkdir dir="${build}"/>
    <mkdir dir="${build.java}"/>
    <mkdir dir="${build.resources}"/>
    <mkdir dir="${build.resources.test}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.model}" />
    <mkdir dir="${build.src.java}"/>
    <mkdir dir="${build.src.test}"/>
    <mkdir dir="${build.javadoc}"/>
    <mkdir dir="${build.tmp}"/>

    <mkdir dir="${results}"/>
    <mkdir dir="${results.junit}"/>
    <mkdir dir="${results.checkstyle}"/>
    <mkdir dir="${results.antdoc}"/>

    <mkdir dir="${tutorial}"/>
    <mkdir dir="${tutorial}/lib"/>
    <mkdir dir="${tutorial}/model"/>
    <mkdir dir="${tutorial}/model/tutorial"/>
    <mkdir dir="${tutorial}/model/tutorial/resources"/>
    <mkdir dir="${tutorial}/resources"/>
    <mkdir dir="${tutorial}/src/java/org/intermine/tutorial"/>
    
    <filter token="LOG_DIR" value="${basedir}"/>
    <copy todir="${build.resources}" filtering="true" overwrite="true">
      <fileset dir="${resources}/runtime"/>
    </copy>
    <copy todir="${build.resources.test}" flatten="true" includeEmptyDirs="false" failonerror="false">
      <fileset dir="${model}">
        <include name="testmodel/resources/**"/>
      </fileset>
      <fileset dir="${resources}/test">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy file="${runtime.properties.local}" tofile="${build.resources.test}/intermine.properties"/>
  </target>

  <target name="prepare-dist">
    <mkdir dir="${dist}"/>
    <mkdir dir="${dist.webapp}"/>
    <mkdir dir="${dist.javadoc}"/>
  </target>

  <!-- Help -->
  <target name="help" description="Displays user targets">
    <echo message=""/>
    <echo message="InterMine build file - available targets are:"/>
    <echo message=""/>
    <echo message="compile-main           --> compiles the source code"/>
    <echo message="compile-testmodel      --> generate testmodel class and mapping files"/>
    <echo message="build-db-unittest      --> create the unittest database tables"/>
    <echo message="insert-data-unittest   --> store testmodel test data"/>
    <echo message="test-main              --> runs the unit tests"/>
    <echo message="clean                  --> cleans up the directory"/>
    <echo message="jar                    --> builds the InterMine jar"/>
    <echo message=""/>
    <echo message="See 'ant -projecthelp' for full target list"/>
  </target>


  <!-- Compilation targets -->

  <!-- main java source -->
  <target name="precompile-main" depends="prepare">
    <mkdir dir="${build.src.java}/org/intermine/sql/query"/>
    <mkdir dir="${build.src.java}/org/intermine/objectstore/query/iql"/>
    <mkdir dir="${build.src.java}/org/intermine/dataconversion"/>
    <antlr target="${src.java}/org/intermine/sql/query/intermine_sql.g"
           outputdirectory="${build.src.java}/org/intermine/sql/query">
      <classpath refid="project.class.path"/>
    </antlr>
    <antlr target="${src.java}/org/intermine/objectstore/query/iql/intermine_iql.g"
           outputdirectory="${build.src.java}/org/intermine/objectstore/query/iql">
      <classpath refid="project.class.path"/>
    </antlr>
    <antlr target="${src.java}/org/intermine/dataconversion/itempath.g"
           outputdirectory="${build.src.java}/org/intermine/dataconversion">
      <classpath refid="project.class.path"/>
    </antlr>
    <depend srcdir="${src.java}" destdir="${build.java}" closure="yes" dump="yes"/>
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}"/>
      <src path="${src.java}"/>
      <!-- this will include all dependent files of these tasks -->
      <include name="org/intermine/codegen/ModelOutputTask.java"/>
      <include name="org/intermine/modelproduction/ModelGenerationTask.java"/>
    </javac>
  </target>

  <target name="compile-datatracking" depends="precompile-main">
    <ant antfile="build-model.xml" target="build-model-from-xml" inheritRefs="true">
      <property name="model.name" value="datatracking"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="compile-fulldata" depends="precompile-main">
    <copy todir="${build.model}/fulldata" file="${model}/fulldata/fulldata_keyDefs.properties"/>
    <ant antfile="build-model.xml" target="build-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>
  </target>

  <target name="compile-main" depends="compile-datatracking, compile-fulldata"
          description="compile the java source">
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="project.class.path"/>
      <src path="${build.src.java}"/>
      <src path="${src.java}"/>
      <exclude name="org/intermine/web/**"/> 
      <exclude name="org/intermine/tutorial/**"/> 
    </javac>
  </target>
  

  <!-- Models to build -->

  <target name="compile-testmodel" depends="compile-main">
    <ant antfile="build-model.xml" target="build-model-from-xml" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="build-db-fulldatatest" depends="compile-main">
    <ant antfile="build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="fulldata"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.fulldatatest"/>
      <property name="objectstore.name" value="os.fulldatatest"/>
    </ant>
  </target>

  <target name="build-db-unittest" depends="compile-testmodel">
    <ant antfile="build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.unittest"/>
      <property name="objectstore.name" value="os.unittest"/>
    </ant>
  </target>

  <target name="build-db-truncunittest" depends="compile-testmodel">
    <ant antfile="build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.truncunittest"/>
      <property name="objectstore.name" value="os.truncunittest"/>
    </ant>
  </target>
  
  <target name="compile-userprofile" depends="precompile-main">
    <ant antfile="build-model.xml" target="build-model-from-zargo" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="build-db-userprofile" depends="compile-userprofile, compile-main">
    <ant antfile="build-model.xml" target="build-db" inheritRefs="true">
      <property name="model.name" value="userprofile"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="db.name" value="db.userprofile"/>
      <property name="objectstore.name" value="os.userprofile"/>
    </ant>
    <antcall target="load-default-templates"/>
  </target>

  <!-- load default global template queries -->
  <target name="load-default-templates" depends="compile-main, compile-webapp">
    <!-- insert default template queries. this will also create the superuser account. -->
    <taskdef name="insert-default-templates" classname="org.intermine.web.task.LoadDefaultTemplatesTask">
      <classpath refid="test.class.path"/>
    </taskdef>
    <insert-default-templates templatesXml="model/testmodel/resources/web/template-queries.xml"
                              username="${webapp.superuser}"/>
  </target>

  <!-- insert the testmodel data into the database -->
  <target name="insert-data-unittest" depends="build-db-unittest">
    <taskdef name="insert-xml-data" classname="org.intermine.dataloader.XmlDataLoaderTask">
      <classpath refid="test.class.path"/>
    </taskdef>
    <insert-xml-data integrationWriter="integration.unittestsingle"
                     xmlFile="${build.resources.test}/testmodel_data.xml"
                     sourceName="testsource"/>
  </target>

  <!-- drop all precomputed tables -->
  <target name="drop-precomputed-tables-testmodel" depends="compile-main">
    <taskdef name="drop-precomputed-tables"
             classname="org.intermine.task.DropPrecomputedTablesTask">
      <classpath refid="test.class.path"/>
    </taskdef>

    <drop-precomputed-tables alias="os.unittest"/>
  </target>

  <!-- create selected precomputed tables -->
  <target name="precompute-testmodel-queries" depends="compile-main">
    <ant antfile="build-model.xml" target="precompute-model" inheritRefs="true">
      <property name="objectstore.name" value="os.unittest"/>
      <property name="db.name" value="db.unittest"/>
      <property name="model.name" value="testmodel"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <!-- create selected precomputed tables and test the speed of queries -->
  <target name="precompute-testmodel-queries-test"
          depends="compile-main, drop-precomputed-tables-testmodel">
    <ant antfile="build-model.xml" target="precompute-model-test" inheritRefs="true">
      <property name="objectstore.name" value="os.unittest"/>
      <property name="db.name" value="db.unittest"/>
      <property name="model.name" value="testmodel"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <!-- make pre-computed tables for testmodel template queries -->
  <target name="precompute-testmodel-templates" 
          depends="compile-main, compile-userprofile, compile-testmodel, compile-webapp">
    <ant antfile="build-model.xml" target="precompute-templates" inheritRefs="true">
      <property name="objectstore.name" value="os.unittest"/>
      <property name="db.name" value="db.unittest"/>
      <property name="model.name" value="testmodel"/>
      <property name="precompute.minRows" value="0"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <!-- index the unittest database -->
  <target name="create-indexes-unittest">
    <ant antfile="build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="os.alias" value="os.unittest"/>
    </ant>
  </target>

  <target name="create-indexes-unittest-attribute">
    <ant antfile="build-model.xml" target="create-indexes" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
      <property name="os.alias" value="os.unittest"/>
      <property name="create.attribute.indexes" value="true"/>
    </ant>
  </target>

  <!-- Acedb test build targets -->
  
  <!-- generate acedbtest model from .wrm file -->
  <target name="build-acedbtest" depends="compile-main" >
    <ant antfile="build-model.xml" target="build-model-from-ace" inheritRefs="true">
      <property name="model.name" value="acedbtest"/>
      <reference torefid="class.path" refid="acedbtest.class.path"/>
    </ant>
  </target>

  <!-- copy original .wrm file to model directory for acedataloadertest -->
  <target name="copy-model-acedbtest" depends="build-acedbtest">
    <copy todir="${build.model}/acedbtest" file="${model}/acedbtest/acedbtest.wrm"/>
  </target>

  <!-- copy original .xmi file to model directory for XmiParserFunctionalTest -->
  <target name="copy-model-xmitest">
    <copy todir="${build.model}/xmitest" file="${model}/xmitest/xmitest.xmi"/>
    <copy todir="${build.model}/xmitest" file="${model}/xmitest/xmitest.xml"/>
  </target>

  <!-- copy original .xsd file to model directory for XmlSchemaParserFunctionalTest -->
  <target name="copy-model-xmlschematest">
    <copy todir="${build.model}/xmlschematest" file="${model}/xmlschematest/xmlschematest.xsd"/>
    <copy todir="${build.model}/xmlschematest" file="${model}/xmlschematest/xmlschematest.xml"/>
  </target>

  <!-- Test XML Schema -->
  <target name="test-xmlschema" depends="compile-main" >
    <ant antfile="build-model.xml" target="build-model-from-xmlschema" inheritRefs="true">
      <property name="model.name" value="test"/>
      <property name="build.model.dir" value="${build.model}/test"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>


  <!-- Unit test targets -->

  <!-- compile the tests -->
  <target name="prepare-test" depends="compile-testmodel, build-acedbtest">
    <copy todir="${build.src.test}">
      <fileset dir="${src.test}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    <depend srcdir="${build.src.test}" destdir="${build.test}" closure="yes" dump="yes">
      <classpath>
        <pathelement path="${build.java}"/>
      </classpath>
    </depend>
  </target>

  <target name="compile-test" depends="prepare-test"
          description="compile the java test source" >
    <javac destdir="${build.test}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="test.class.path"/>
      <src path="${build.src.test}" />
      <exclude name="org/intermine/web/**"/>
    </javac>
  </target>

  <!-- run the tests -->
  <target name="test-main" 
          depends="compile-test, build-db-unittest, build-db-truncunittest, build-db-fulldatatest, copy-model-acedbtest, copy-model-xmitest, copy-model-xmlschematest"
          description="perform JUnit tests on main source code" >

    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure" reloading="false">
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}" includes="**/*Test.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
          <exclude name="org/intermine/web/**" />
          <exclude name="org/intermine/objectstore/webservice/**" />
          <exclude name="org/intermine/dataconversion/ItemToObject*" />
          <exclude name="org/intermine/util/CacheMapTest.class" />
        </fileset>
      </batchtest>
    </junit>

    <antcall target="test-cachemap"/>
    <antcall target="test-report"/>
  </target>

  <!-- run cachemap test in a separate jvm with memory limit -->
  <target name="test-cachemap" 
          description="perform cache map test in a separate jvm" >
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure">
      <jvmarg value="-Xmx200M"/>
      <classpath refid="test.class.path"/>
      <formatter type="xml" />
      <batchtest fork="yes" todir="${results.junit}">
        <fileset dir="${build.test}" includes="org/intermine/util/CacheMapTest.class">
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="compile-webapp-tests" depends="compile-webapp, prepare-test">
    <javac destdir="${build.test}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="webapptest.class.path"/>
      <src path="${build.src.test}" />
      <include name="org/intermine/web/**"/>
    </javac>
  </target>

  <target name="test-webapp"
          depends="compile-webapp, build-db-userprofile, build-testable-webapp, compile-webapp-tests"
          description="perform JUnit tests on web application" >
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure" reloading="false">
      <classpath refid="webapptest.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}">
          <include name="org/intermine/web/**/*Test.class" />
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
    <antcall target="build-db-unittest"/>
    <antcall target="test-report"/>
  </target>

  <target name="test-webservice" depends="compile-test, build-db-unittest, build-testable-webservice, release-webservice"
          description="perform JUnit tests on web service" >
    <junit printsummary="yes" haltonfailure="no" failureproperty="junit.failure" reloading="false">
      <classpath refid="webapptest.class.path"/>
      <formatter type="xml" />
      <batchtest fork="no" todir="${results.junit}">
        <fileset dir="${build.test}">
          <include name="org/intermine/objectstore/webservice/**/*Test.class" />
          <depend targetdir="${results.junit}">
            <mapper type="package" from="*.class" to="TEST-*.xml" />
          </depend>
        </fileset>
      </batchtest>
    </junit>
    <antcall target="remove-webservice"/>
    <antcall target="test-report"/>
  </target>

  <!-- force all the unit tests to be redone -->
  <target name="junit-clean" depends="prepare">
    <delete>
      <fileset dir="${results.junit}" includes="TEST-*.xml"/>
    </delete>
  </target>
  
  <target name="inctest" 
          depends="prepare,compile-userprofile,test-main,test-webapp,test-webservice,test-tutorial,checkstyle"
          description="do an incremental test and fail if there are any errors">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate InterMine coding standards" if="checkstyle.failure"/>
  </target>

  <target name="fulltest" depends="prepare,junit-clean,clean-code,inctest"
          description="do a full test and fail if there are any errors">
  </target>

  <!-- target to run tests from cruiscontrol - temprarily ignores troublesome webservice tests-->
  <target name="test-autobuild" 
          depends="clean,test-main,test-webapp,test-tutorial,checkstyle"
          description="run a clean and test all code except webservice">
    <fail message="Some unit tests have failed" if="junit.failure"/>
    <fail message="Some files violate InterMine coding standards" if="checkstyle.failure"/>
  </target>


  <target name="test-report" depends="prepare"
          description="generate a test report for all the unit tests" >
    <junitreport todir="${results.junit}">
      <fileset dir="${results.junit}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${results.junit}"/>
    </junitreport>
  </target>


  <!-- Functional tests -->

  <!-- System tests -->

  <!-- Java checkstyle targets -->

  <target name="checkstyle" depends="prepare"
          description="checks the coding style of all the java files in the project">
    <taskdef resource="checkstyletask.properties">
      <classpath refid="checkstyle.class.path"/>
    </taskdef>
    <checkstyle config="${resources}/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <classpath refid="base.class.path"/>
      <formatter type="xml" tofile="${results.checkstyle}/checkstyle_report.xml" />
      <fileset dir="${src.java}">
        <include name="**/*.java" />
      </fileset>
      <property key="checkstyle.header.file" value="${resources}/copyright_header.txt"/>
    </checkstyle>

    <style in="${results.checkstyle}/checkstyle_report.xml"
           out="${results.checkstyle}/checkstyle_report.html"
           style="${resources}/checkstyle-frames.xsl" />

  </target>

  <!-- Javadoc targets -->

  <target name="javadoc" depends="prepare"
          description="generate the javadoc">
    <javadoc destdir="${build.javadoc}" author="true" version="true" use="true" windowtitle="InterMine API" additionalparam="-breakiterator">
      <classpath refid="project.class.path"/>
      <fileset dir="${src.java}" defaultexcludes="yes" />
      <doctitle><![CDATA[<h1>InterMine</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; ${YEAR} InterMine. All Rights Reserved.</i>]]></bottom>
    </javadoc>
  </target>


  <!-- Webservice targets -->
  <target name="build-webservice" depends="prepare,prepare-dist,jar-intermine"
          description="Build the InterMine webservice">
    <mkdir dir="${build.webapp}/webservice"/>
    <mkdir dir="${build.webapp}/webservice/META-INF"/>
    <mkdir dir="${build.webapp}/webservice/WEB-INF"/>
    <mkdir dir="${build.webapp}/webservice/WEB-INF/lib"/>
    <copy todir="${build.webapp}/webservice/WEB-INF">
      <fileset dir="${resources}/webapps/webservice">
        <exclude name="web.xml"/>
        <exclude name="context.xml"/>
      </fileset>
    </copy>

    <taskdef name="generate-wsdd"
             classname="org.intermine.objectstore.webservice.ser.GenerateWSDDTask">
      <classpath refid="project.class.path" />
    </taskdef>
    <generate-wsdd destfile="${build.tmp}/server-config.wsdd.fragment"/>
    <loadfile srcFile="${build.tmp}/server-config.wsdd.fragment" property="generated.wsdd"/>
    <filter token="WSDD_INCLUDE" value="${generated.wsdd}"/>
    <copy todir="${build.webapp}/webservice/WEB-INF" filtering="true" overwrite="true" file="${resources}/webapps/webservice/server-config.wsdd"/>

    <copy todir="${build.webapp}/webservice/WEB-INF/lib">
      <fileset dir="${lib}">
        <patternset refid="lib.webapp.common"/>
        <patternset refid="lib.webapp.webservice"/>
      </fileset>
      <fileset dir="${dist}" includes="intermine.jar"/>
    </copy>

    <filter token="REPLACE_PATH" value="${webservice.path}"/>
    <copy todir="${build.webapp}/webservice/META-INF" file="${resources}/webapps/webservice/context.xml" filtering="true"/>

    <war destfile="${dist.webapp}/webservice.war" webxml="${resources}/webapps/webservice/web.xml">
      <fileset dir="${build.webapp}/webservice"/>
    </war>
  </target>
  
  <target name="build-testmodel-webservice" depends="build-webservice,jar-testmodel">
    <copy file="${runtime.properties.local}" toFile="${build.tmp}/WEB-INF/intermine.properties"/>

    <war destfile="${dist.webapp}/webservice.war" update="true">
      <lib dir="${dist}" includes="intermine-testmodel.jar" />
      <classes file="${resources}/test/default.intermine.properties"/>
      <classes file="${build.tmp}/WEB-INF/intermine.properties"/>
    </war>
  </target>
  
  <target name="build-testable-webservice" depends="build-testmodel-webservice">
    <war destfile="${dist.webapp}/webservice.war" update="true">
      <lib dir="${dist}" includes="intermine-testmodel.jar" />
      <classes file="${resources}/test/default.intermine.properties"/>
    </war>
  </target>


  <!-- Packaging/distribution targets -->

  <target name="dist-javadoc" depends="prepare-dist,javadoc"
          description="makes the javadoc available for distribution">
    <copy todir="${dist.javadoc}">
      <fileset dir="${build.javadoc}"/>
    </copy>
  </target>   


  <target name="jar-intermine" depends="prepare-dist, compile-main"
          description="Makes a JAR file of all the classes and configuration files">
    <condition property="version" value="${DTSTAMP}">
      <not>
        <isset property="version" />
      </not>
    </condition>

    <echo message="Creating jar file version ${version}" />

    <manifest file="${build.tmp}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Specification-Title" value="InterMine"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="InterMine"/>
      <attribute name="Implementation-Title" value="InterMine"/>
      <attribute name="Implementation-Version" value="${version}"/> 
      <attribute name="Implementation-Vendor" value="InterMine"/>
    </manifest>

    <jar destfile="${dist}/intermine.jar" manifest="${build.tmp}/MANIFEST.MF">
      <fileset file="build-model.xml"/>
      <fileset file="build-webapp.xml"/>
      <fileset dir="${build.java}"/>
      <fileset dir="${build.model}/fulldata"/>
      <fileset dir="${build.model}/datatracking"/>
      <fileset file="${build.resources}/log4j.properties"/>
    </jar>
  </target>

  <target name="jar" depends="jar-intermine, jar-intermine-webapp"
          description="Makes a JAR file of intermine and essential lib jars">
    <mkdir dir="${build.tmp}/jars"/>

    <unzip dest="${build.tmp}/jars">
      <fileset dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.antlr"/>
        <patternset refid="lib.uml"/>
      </fileset>
    </unzip>

    <jar destfile="${dist}/intermine-all.jar" manifest="${build.tmp}/MANIFEST.MF">
      <zipfileset src="${dist}/intermine.jar"/>
      <zipfileset src="${dist}/intermine-webapp.jar"/>
      <fileset dir="${build.tmp}/jars"/>
    </jar>
    
    <delete dir="${build.tmp}/jars"/>
  </target>

  <target name="jar-testmodel" depends="prepare-dist, compile-testmodel"
          description="create a jar of the testmodel">
    <ant antfile="build-model.xml" target="jar" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
  </target>

  <target name="jar-webservice-client" depends="jar-intermine">
    <mkdir dir="${build.tmp}/jars"/>
    
    <unzip dest="${build.tmp}/jars">
      <fileset dir="${lib}">
        <patternset refid="lib.webapp.common"/>
        <patternset refid="lib.webapp.webservice"/>
      </fileset>
    </unzip>

    <jar destfile="${dist}/webservice-client.jar">
      <zipfileset src="${dist}/intermine.jar"/>
      <fileset dir="${build.tmp}/jars"/>
    </jar>
    
    <delete dir="${build.tmp}/jars"/>
  </target>

  <target name="build-demo-webservice-client" depends="jar-webservice-client, compile-testmodel">
    <jar destfile="${dist}/intermine-webservice-client.jar">
      <zipfileset src="${dist}/webservice-client.jar"/>
      <fileset dir="${resources}/webservice-client" includes="default.intermine.properties"/>
      <fileset dir="${build.model}/testmodel"/>
    </jar>
  </target>
      
  <target name="build-tutorial" depends="jar-intermine, build-webapp"
          description="build the tutorial tree">
    <!-- root dir -->
    <copy todir="${tutorial}">
      <fileset dir="${resources}/tutorial">
        <include name="build.xml"/>
        <include name="intermine.properties"/>
        <include name="build.properties"/>
      </fileset>
      <fileset dir="." includes="build-*.xml"/>
    </copy>

    <!-- lib dir -->
    <copy todir="${tutorial}/lib">
      <fileset dir="${lib}">
        <patternset refid="lib.common"/>
        <patternset refid="lib.catalina"/>
        <patternset refid="lib.webapp.common"/>
        <patternset refid="lib.webapp.intermine"/>
        <patternset refid="lib.antlr"/>
        <patternset refid="lib.uml"/>
      </fileset>
      <fileset dir="${dist}" includes="intermine.jar"/>
      <fileset dir="${dist.webapp}" includes="intermine.war"/>
    </copy>

    <!-- model dir -->
    <copy todir="${tutorial}/model/tutorial" file="${resources}/tutorial/tutorial.zargo"/>
    <copy todir="${tutorial}/model/tutorial/resources" file="${resources}/tutorial/tutorial_keyDefs.properties"/>
    <copy todir="${tutorial}/resources" file="${resources}/tutorial/tutorialsource_keys.properties"/>  

    <mkdir dir= "${tutorial}/model/tutorial/resources/web/" />
    <copy todir="${tutorial}/model/tutorial/resources/web" file="${resources}/tutorial/webconfig-model.xml" />
    <copy todir="${tutorial}/model/tutorial/resources/web" file="${resources}/tutorial/tiles-defs-model.xml" />

    <touch file="${tutorial}/model/tutorial/resources/web/struts-config-model.xml" />
    <touch file="${tutorial}/model/tutorial/resources/web/model.properties" />
    <touch file="${tutorial}/model/tutorial/resources/web/web.properties" />

    <!-- resources dir -->
    <copy todir="${tutorial}/resources" file="${resources}/tutorial/tutorial_data.xml"/>
    <!-- src dir -->
    <copy todir="${tutorial}/src/java/org/intermine/tutorial">
      <fileset dir="${src.java}/org/intermine/tutorial"/>
    </copy>
  </target>

  <target name="test-tutorial" depends="build-tutorial">
    <ant dir="${tutorial}" target="test" inheritAll="false" inheritRefs="true">
      <property name="runtime.properties.local" location="${runtime.properties.local}"/>
    </ant>
  </target>
  
  <!-- Webapp targets -->
  
  <target name="compile-webapp" depends="compile-userprofile, compile-main">
    <javac destdir="${build.java}" listfiles="yes" debuglevel="lines,vars,source" debug="on">
      <classpath refid="project.class.path"/>
      <src path="${src.java}"/>
      <include name="org/intermine/web/**"/>
    </javac>
  </target>
  
  <target name="jar-intermine-webapp" depends="compile-webapp, prepare-dist">
    <condition property="version" value="${DTSTAMP}">
      <not>
        <isset property="version" />
      </not>
    </condition>

    <echo message="Creating jar file version ${version}" />

    <manifest file="${build.tmp}/MANIFEST.MF">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Specification-Title" value="InterMine"/>
      <attribute name="Specification-Version" value="${version}"/>
      <attribute name="Specification-Vendor" value="InterMine"/>
      <attribute name="Implementation-Title" value="InterMine"/>
      <attribute name="Implementation-Version" value="${version}"/> 
      <attribute name="Implementation-Vendor" value="InterMine"/>
    </manifest>

    <jar destfile="${dist}/intermine-webapp.jar" manifest="${build.tmp}/MANIFEST.MF">
      <fileset dir="${build.java}" includes="org/intermine/web/**"/>
      <fileset dir="${build.model}/userprofile" excludes="tmp/**"/>
    </jar>
  </target>

  <target name="build-webapp" depends="jar-intermine-webapp, jar-intermine">
    <mkdir dir="${build.webapp}/intermine"/>
    <mkdir dir="${build.webapp}/intermine/images"/>
    <mkdir dir="${build.webapp}/intermine/model"/>
    <mkdir dir="${build.webapp}/intermine/META-INF"/>
    <mkdir dir="${build.webapp}/intermine/WEB-INF"/>
    <mkdir dir="${build.webapp}/intermine/WEB-INF/classes"/>
    <mkdir dir="${build.webapp}/intermine/WEB-INF/lib"/>

    <copy todir="${build.webapp}/intermine">
      <fileset dir="${src.webapp}"/>
      <fileset file="${resources}/webapps/intermine/*.css"/>
    </copy>
    <copy todir="${build.webapp}/intermine/images">
      <fileset dir="${resources}/webapps/intermine/images"/>
    </copy>
    <filter token="SITE_PREFIX" value="${www.location}"/>
    <filter token="HELP_LOCATION" value="${www.help.location}"/>
    <filter token="SITE_SUPERUSER" value="${webapp.superuser}"/>
    <copy todir="${build.webapp}/intermine/WEB-INF" filtering="true">
      <fileset dir="${resources}/webapps/intermine"
               excludes="web.xml images/** InterMineWebApp*.properties default.intermine.properties *.css"/>
    </copy>
    <copy todir="${build.webapp}/intermine/WEB-INF/lib">
      <fileset dir="${lib}">
        <patternset refid="lib.webapp.common"/>
        <patternset refid="lib.webapp.intermine"/>
      </fileset>
      <fileset dir="${dist}" includes="intermine.jar intermine-webapp.jar"/>
    </copy>
    
    <filter token="HELP_LOCATION" value="${www.help.location}"/>
    <copy todir="${build.webapp}/intermine/WEB-INF/classes" filtering="true">
      <fileset dir="${resources}/webapps/intermine">
        <include name="InterMineWebApp*.properties"/>
        <include name="default.intermine.properties"/>
      </fileset>
    </copy>
    
    <filter token="LOG_DIR" value="${webapp.logdir}"/>
    <copy todir="${build.webapp}/intermine/WEB-INF/classes" filtering="true" overwrite="true">
      <fileset dir="${resources}/runtime/">
        <include name="log4j.properties"/>
        <include name="commons-logging.properties"/>
      </fileset>
    </copy>
    <war destfile="${dist}/webapp/intermine.war" webxml="${resources}/webapps/intermine/web.xml">
      <fileset dir="${build.webapp}/intermine"/>
    </war>
  </target>

  <target name="build-testmodel-webapp" 
          depends="build-webapp"
          description="Build webapp including the test model">
    <!--<ant antfile="build-model.xml" target="summarise-objectstore" inheritRefs="true">
      <property name="model.name" value="testmodel"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>      
    -->
    <ant antfile="build-model.xml" target="add-model-to-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/intermine.war"/>
      <property name="model.name" value="testmodel"/>
      <property name="db.name" value="db.unittest"/>
      <property name="objectstore.name" value="os.unittest"/>
      <reference torefid="class.path" refid="test.class.path"/>
    </ant>
    
    <copy todir="${build.tmp}" file="${resources}/test/default.intermine.properties"/>
    <patternset id="default-intermine-properties">
      <include name="default.intermine.properties"/>
    </patternset>
    <ant antfile="build-webapp.xml" target="add-to-war-classes" inheritRefs="true">
      <property name="war" value="${dist.webapp}/intermine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="default-intermine-properties"/>
    </ant>

    <copy todir="${build.tmp}" file="${build.model}/testmodel/objectstoresummary.properties"/>

    <filter token="SITE_PREFIX" value="${www.location}"/>
    <filter token="HELP_LOCATION" value="${www.help.location}"/>
    <filter token="SITE_SUPERUSER" value="${webapp.superuser}"/>
    <copy todir="${build.tmp}" filtering="true"
          file="${resources}/webapps/intermine/global.web.properties"
          overwrite="true" verbose="true"/>
    <concat destfile="${build.tmp}/web.properties">
      <fileset file="${model}/testmodel/resources/web/web.properties" />
      <fileset file="${build.properties.local}" />
    </concat>
    <patternset id="objectstore-summary-properties">
      <include name="global.web.properties"/>
      <include name="web.properties"/>
      <include name="objectstoresummary.properties"/>
    </patternset>
    <ant antfile="build-webapp.xml" target="add-to-war-webinf" inheritRefs="true">
      <property name="war" value="${dist.webapp}/intermine.war"/>
      <property name="file.dir" value="${build.tmp}"/>
      <reference torefid="file.names" refid="objectstore-summary-properties"/>
    </ant>
  </target>

  <target name="build-testable-webapp" depends="build-testmodel-webapp"
          description="Build webapp including the test model and test libraries">
    <patternset id="webapp-properties">
      <include name="InterMineWebApp*.properties"/>
    </patternset>
    <ant antfile="build-webapp.xml" target="add-to-war-root" inheritRefs="true">
      <property name="war" value="${dist.webapp}/intermine.war"/>
      <reference torefid="file.names" refid="webapp-properties"/>
      <property name="file.dir" value="${resources}/webapps/intermine"/>
    </ant>    
  </target>

  <target name="release-webapp"
          description="release the webapp to the server">
    <ant antfile="build-webapp.xml" target="release-webapp" inheritRefs="true">
      <property name="war" value="${dist.webapp}/intermine.war"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>    
  </target>
  
  <target name="remove-webapp"
          description="remove the webapp from the server">
    <ant antfile="build-webapp.xml" target="remove-webapp" inheritRefs="true">
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>    
  </target>
  
  <!-- Webservice targets -->

  <target name="release-webservice"
          description="release the webservice to the server">
    <ant antfile="build-webapp.xml" target="release-webservice" inheritRefs="true">
      <property name="war" value="${dist.webapp}/webservice.war"/>
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>    
  </target>

  <target name="remove-webservice"
          description="remove the webservice from the server">
    <ant antfile="build-webapp.xml" target="remove-webservice" inheritRefs="true">
      <reference torefid="class.path" refid="project.class.path"/>
    </ant>    
  </target>

  <!-- ========== POST PROCESSING TARGETS ========== -->

  <property name="os.summary.properties.file" 
            value="${model}/testmodel/resources/objectstoresummary.config.properties" />
  <property name="summarise.output.properties" 
            value="${build.model}/testmodel/objectstoresummary.properties"/>

  <!-- Model diagrams -->
  
  <target name="dot-main" depends="compile-main">
    <taskdef name="dot"
             classname="org.intermine.task.InheritanceDotTask">
      <classpath refid="project.class.path"/>
    </taskdef>
    <dot directory="${src.java}" packageName="org.intermine" file="main.dot" omit="java.io.Serializable,java.lang.Object" boring="java.lang.Object"/>
  </target>
  
  <target name="dot-test" depends="compile-test">
    <taskdef name="dot"
             classname="org.intermine.task.InheritanceDotTask">
      <classpath refid="test.class.path"/>
    </taskdef>
    <dot directory="${src.test}" packageName="org.intermine" file="test.dot" omit="java.io.Serializable" boring="junit.framework.TestCase"/>
  </target>
  
  <target name="dot-testmodel" depends="compile-test">
    <taskdef name="dot"
             classname="org.intermine.task.InheritanceDotTask">
      <classpath refid="test.class.path"/>
    </taskdef>
    <dot directory="${build.model}/testmodel" packageName="org.intermine.model.testmodel" file="testmodel.dot" omit="org.intermine.model.InterMineObject,java.lang.Object" boring=""/>
  </target>
  
  <!-- Cleaning-up targets -->
  
  <target name="clean"
          description="clean up generated files">
    <delete dir="${build}"/>
    <delete dir="${results}"/>
    <delete>
      <fileset dir=".">
        <include name="junit*.properties"/>
        <include name="velocity.log*"/>
        <include name="intermine.log*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-code"
          description="clean up all generated and compiled code">
    <delete dir="${build.java}"/>
    <delete dir="${build.src.java}"/>
    <delete dir="${build.test}"/>
    <delete dir="${build.src.test}"/>
    <delete dir="${build.resources}"/>
    <delete dir="${build.model}"/>
    <delete>
      <fileset dir=".">
        <include name="velocity.log*"/>
        <include name="intermine.log*"/>
      </fileset>
    </delete>
    <antcall target="prepare" />
  </target>
  
  <target name="distclean" depends="clean"
          description="clean up all distribution files">
    <delete dir="${dist}"/>
  </target>
  
  <!-- antdoc target -->
  <target name="antdoc"> 
    <taskdef name="antdoc" classname="org.ed.pack.ant.AntDoc">
      <classpath refid="project.class.path"/>
    </taskdef>
    <antdoc destination="${results.antdoc}" buildfile="${ant.file}"/>
  </target>
  
  <!-- Debugging with NetBeans -->
  
  <target name="debug" depends="" if="netbeans.home" description="debug intermine with netbeans debugger">
    <nbjpdaconnect name="intermine" host="localhost" address="8000" transport="dt_socket">
      <classpath refid="project.class.path"/>
      <sourcepath refid="debug.src.path"/>
    </nbjpdaconnect>
    <nbbrowse url="${www.location}"/>
  </target>
</project>
