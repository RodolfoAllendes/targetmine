<?xml version="1.0"?>

<article>

<artheader>
<date>2002-11-21</date>
<title>Coding Standards</title>
<authorgroup>
<author>
<firstname>Andrew</firstname>
<surname>Varley</surname>
</author>
</authorgroup>
</artheader>

<sect1>
<title>InterMine coding standards</title>

<para>This document presents the standards to which all Java code in
the InterMine project should adhere. These coding standards are intended
to ensure that all code is understandable and maintainable by
everyone, and that the whole project remains robust and buildable by
anyone. All code should follow the <ulink
url="http://java.sun.com/docs/codeconv/">Sun Java coding
guidelines</ulink>, but with the following taking precedence.</para>

<para>Many of these standards are enforced using the <ulink
url="http://checkstyle.sourceforge.net">Checkstyle</ulink>
software.</para>

<sect2>
<title>Variable, method and class names</title>

<itemizedlist>

<listitem>Use English names, eg. <varname>startCodon</varname> and not
<varname>sc</varname></listitem>

<listitem>Use mixed-case names eg. <varname>startCodon</varname> and
not <varname>startcodon</varname>.</listitem>

<listitem>Attribute and method names should begin with a lowercase
character, class names should begin with an upper case
character.</listitem>

<listitem>Names should be less than 15 characters long</listitem>

</itemizedlist>
</sect2>


<sect2>
<title>Member Functions</title>

<itemizedlist>

<listitem>Use <function>getXxx()</function> and
<function>setXxx()</function> methods for getting and setting class
fields. Boolean fields should have <function>isXxx</function> and
<function>setXxx</function> accessors, eg. <function>
isPersistent()</function>.</listitem>

<listitem>Use the minimum visibility level necessary for a
method.</listitem>

<listitem>All member functions should have JavaDoc comments to include
<itemizedlist>
<listitem>What and why the function does what it does</listitem>
<listitem>What the parameters are.</listitem>
<listitem>The return value.</listitem>
<listitem>Exceptions.</listitem>
<listitem>Examples of use, if applicable.</listitem>
</itemizedlist>
</listitem>


</itemizedlist>


</sect2>


<sect2>
<title>Layout</title>

<itemizedlist>

<listitem>All code must follow normal Java indentation rules with an
indent of 4 spaces.</listitem>

<listitem>Open curly braces to appear on same line as preceding code,
with a gap of one space.</listitem>

<listitem>Close curly braces to appear on new line, by themselves
unless followed by <function>else</function>,
<function>catch</function>, <function>finally</function> etc.</listitem>

<listitem>Leave one space around operators (eg. <command>if (a ==
16)</command> and not <command>if (a==16)</command>).</listitem>

<listitem>No line should be longer than 100 characters. Split onto
multiple lines if necessary.</listitem>

<listitem>Make liberal use of brackets in expressions, even when not
necessary. For example, <command>newAmount = (4 * oldAmount) +
17</command> and not <command>newAmount = 4 * oldAmount +
17</command>.</listitem>

</itemizedlist>
</sect2>

<sect2>
<title>Source code and CVS</title>

<itemizedlist>

<listitem>All revisions to a file must be checked in with a
corresponding short comment describing the changes made to that
file.</listitem>

<listitem>General comments such as <synopsis>Corrected error</synopsis>
and <synopsis>Fixed bug</synopsis> should be avoided.</listitem>

<listitem>Say what was done <emphasis>to that file</emphasis>, rather
than having the same comment on a large number of files committed at
the same time.</listitem>

<listitem>No paths, usernames, passwords etc to be hardcoded in to the
code. Where necessary, these should be in a properties
file.</listitem>

<listitem>The complete system must build directly out of CVS and not
require any external jar files or binaries (apart from Ant and the
JDK!!). Any dependent jar files must be in CVS in the lib directory
and be mentioned in the appropriate section in the
<filename>build.xml</filename> file.</listitem>

<listitem>Any files no longer used should be removed using the command
<command>cvs rm</command>.</listitem>

<listitem>No code to be committed to CVS that breaks the build, unless
for a very short time (eg. while committing a large set of changes)
and with agreement from all developers.</listitem>

<listitem>Commit little and often.</listitem>

</itemizedlist>
</sect2>


<sect2>
<title>Tests</title>

<itemizedlist>
<listitem><emphasis>All</emphasis> classes should have a corresponding
JUnit test class (in the tests directory).</listitem>

<listitem>Test classes should thoroughly test every public method of
the class except getters and setters.</listitem>

<listitem>Unit tests are concerned only with inputs and outputs of
methods, not the internal workings of the method.</listitem>

<listitem>Test class names should be the name of the class being
tested, suffixed with the word <synopsis>Test</synopsis>, eg.
<classname>ClassNameTest</classname>.</listitem>

<listitem>Test methods names should begin with
<synopsis>test</synopsis>, and give an indication of what is being
tested eg. <function>testEquals</function>.</listitem>

<listitem>Test classes <emphasis>must</emphasis> include tests for declared
exceptions and runtime exceptions, and for invalid parameters
(eg. null values, empty strings, negative numbers, etc.).</listitem>

<listitem>Test classes should use the dynamic way of running all the
test methods in that test class, ie.
<function> public static Test suite()
{
    return new TestSuite(QueryClassTest.class);
}
</function>
</listitem>

<listitem>All JUnit tests should pass on code that is checked in to
CVS. If you check something in which causes <emphasis>any</emphasis>
test to fail, it is your responsibility return the master build to
100% pass rate.</listitem>

<listitem>Test classes should be self-contained and not leave any data
lingering in the database. Override the
<function>setUp()</function> and <function>tearDown()</function>
method of the <classname>TestCase</classname> superclass.</listitem>

<listitem>All modules of the system should include some functional
tests. These will probably use a set of test data.</listitem>

<listitem>Functional tests should view the whole module as a black
box.</listitem>

</itemizedlist>
</sect2>

<sect2>
<title>Logging</title>

<itemizedlist>

<listitem>All logging to be done via log4j. No output messages to be
written to stdout or stderr.</listitem>

<listitem>Make use of the different logging levels available.</listitem>

<listitem>Log messages must be descriptive. For example,
<command>log.info("Exon count: "+exonCount)</command> and not
<command>log.info(exonCount)</command>.</listitem>

</itemizedlist>

</sect2>

</sect1>
</article>
