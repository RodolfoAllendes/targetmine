<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <articleinfo>
    <date>2002-11-21</date>

    <title>Coding Standards</title>

    <authorgroup>
      <author>
        <firstname>Andrew</firstname>

        <surname>Varley</surname>
      </author>
    </authorgroup>
  </articleinfo>

  <section>
    <title>InterMine coding standards</title>

    <para>This document presents the standards to which all Java code in the
    InterMine project should adhere. These coding standards are intended to
    ensure that all code is understandable and maintainable by everyone, and
    that the whole project remains robust and buildable by anyone. All code
    should follow the <ulink url="http://java.sun.com/docs/codeconv/">Sun Java
    coding guidelines</ulink>, but with the following taking
    precedence.</para>

    <para>Many of these standards are enforced using the <ulink
    url="http://checkstyle.sourceforge.net">Checkstyle</ulink>
    software.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Variable, method and class names:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use English names, eg. <command>startCodon</command> and not
            <command>sc</command></para>
          </listitem>

          <listitem>
            <para>Use mixed-case names eg. <command>startCodon</command> and
            not <command>startcodon</command>.</para>
          </listitem>

          <listitem>
            <para>Attribute and method names should begin with a lowercase
            character, class names should begin with an upper case
            character.</para>
          </listitem>

          <listitem>
            <para>Names should be less than 15 characters long</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Member Functions</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>Use <command>getXxx()</command> and
            <command>setXxx()</command> methods for getting and setting class
            fields. Boolean fields should have <command>isXxx</command> and
            <command>setXxx</command> accessors, eg. <command>
            isPersistent()</command>.</para>
          </listitem>

          <listitem>
            <para>Use the minimum visibility level necessary for a
            method.</para>
          </listitem>

          <listitem>
            <para>All member functions should have JavaDoc comments to
            include</para>

            <itemizedlist>
              <listitem>
                <para>What and why the function does what it does</para>
              </listitem>

              <listitem>
                <para>What the parameters are.</para>
              </listitem>

              <listitem>
                <para>The return value.</para>
              </listitem>

              <listitem>
                <para>Exceptions.</para>
              </listitem>

              <listitem>
                <para>Examples of use, if applicable.</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Layout</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>All code must follow normal Java indentation rules with an
            indent of 4 spaces.</para>
          </listitem>

          <listitem>
            <para>Open curly braces to appear on same line as preceding code,
            with a gap of one space.</para>
          </listitem>

          <listitem>
            <para>Close curly braces to appear on new line, by themselves
            unless followed by <command>else</command>,
            <command>catch</command>, <command>finally</command> etc.</para>
          </listitem>

          <listitem>
            <para>Leave one space around operators (eg. <command>if (a ==
            16)</command> and not <command>if (a==16)</command>).</para>
          </listitem>

          <listitem>
            <para>No line should be longer than 100 characters. Split onto
            multiple lines if necessary.</para>
          </listitem>

          <listitem>
            <para>Make liberal use of brackets in expressions, even when not
            necessary. For example, <command>newAmount = (4 * oldAmount) +
            17</command> and not <command>newAmount = 4 * oldAmount +
            17</command>.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Source code and CVS</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>All revisions to a file must be checked in with a
            corresponding short comment describing the changes made to that
            file.</para>
          </listitem>

          <listitem>
            <para>General comments such as <quote>Corrected error</quote> and
            <quote>Fixed bug</quote> should be avoided.</para>
          </listitem>

          <listitem>
            <para>Say what was done <emphasis>to that file</emphasis>, rather
            than having the same comment on a large number of files committed
            at the same time.</para>
          </listitem>

          <listitem>
            <para>No paths, usernames, passwords etc to be hardcoded in to the
            code. Where necessary, these should be in a properties
            file.</para>
          </listitem>

          <listitem>
            <para>The complete system must build directly out of CVS and not
            require any external jar files or binaries (apart from Ant and the
            JDK!!). Any dependent jar files must be in CVS in the lib
            directory and be mentioned in the appropriate section in the
            <filename>build.xml</filename> file.</para>
          </listitem>

          <listitem>
            <para>Any files no longer used should be removed using the command
            <command>cvs rm</command>.</para>
          </listitem>

          <listitem>
            <para>No code to be committed to CVS that breaks the build, unless
            for a very short time (eg. while committing a large set of
            changes) and with agreement from all developers.</para>
          </listitem>

          <listitem>
            <para>Commit little and often.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Tests</emphasis></para>

        <itemizedlist>
          <listitem>
            <para><emphasis>All</emphasis> classes should have a corresponding
            JUnit test class (in the tests directory).</para>
          </listitem>

          <listitem>
            <para>Test classes should thoroughly test every public method of
            the class except getters and setters.</para>
          </listitem>

          <listitem>
            <para>Unit tests are concerned only with inputs and outputs of
            methods, not the internal workings of the method.</para>
          </listitem>

          <listitem>
            <para>Test class names should be the name of the class being
            tested, suffixed with the word <quote>Test</quote>, eg.
            <literal>ClassNameTest</literal>.</para>
          </listitem>

          <listitem>
            <para>Test methods names should begin with <quote>test</quote>,
            and give an indication of what is being tested eg.
            <command>testEquals</command>.</para>
          </listitem>

          <listitem>
            <para>Test classes <emphasis>must</emphasis> include tests for
            declared exceptions and runtime exceptions, and for invalid
            parameters (eg. null values, empty strings, negative numbers,
            etc.).</para>
          </listitem>

          <listitem>
            <para>Test classes should use the dynamic way of running all the
            test methods in that test class, ie. <command> public static Test
            suite() { return new TestSuite(QueryClassTest.class); }
            </command></para>
          </listitem>

          <listitem>
            <para>All JUnit tests should pass on code that is checked in to
            CVS. If you check something in which causes
            <emphasis>any</emphasis> test to fail, it is your responsibility
            return the master build to 100% pass rate.</para>
          </listitem>

          <listitem>
            <para>Test classes should be self-contained and not leave any data
            lingering in the database. Override the <command>setUp()</command>
            and <command>tearDown()</command> method of the
            <literal>TestCase</literal> superclass.</para>
          </listitem>

          <listitem>
            <para>All modules of the system should include some functional
            tests. These will probably use a set of test data.</para>
          </listitem>

          <listitem>
            <para>Functional tests should view the whole module as a black
            box.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Logging</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>All logging to be done via log4j. No output messages to be
            written to stdout or stderr.</para>
          </listitem>

          <listitem>
            <para>Make use of the different logging levels available.</para>
          </listitem>

          <listitem>
            <para>Log messages must be descriptive. For example,
            <command>log.info("Exon count: "+exonCount)</command> and not
            <command>log.info(exonCount)</command>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
</article>
