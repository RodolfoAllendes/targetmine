<?xml version="1.0"?>

<article>

  <artheader>
    <title>Introducing InterMine: an example application</title>
  </artheader>

  <para>
    InterMine provides flexible facilities to integrate, store and retrieve data in varying formats from muliple user-specified sources. For a demonstration of its capabilities, whilst neglecting most implementation details, consider the following example which concerns data describing the (simplified) structure of a enterprise. In this case no data integration is performed, as only one data source is used.
  </para>

  <para>
    Assume that our organisation model is described using the following UML diagram, drawn using a graphical editor such as ArgoUML. InterMine is able to read such diagrams directly, and so this is often the best way to describe data for which no model has been predefined.
  </para>

  <table>
    <tbody>
      <row>
        <entry>
          <inlinegraphic fileref="example_model" format="PNG" align="middle"/>
        </entry>
      </row>
    </tbody>
  </table>
  
  <para>
 It is important to note that InterMine generates Java source code for the classes in the model, and transforms all data into instances of these classes prior to storage. The canonical form for data is Java objects, but InterMine does not favour any particular data file format. For the sake of simplicity consider the data to be in the following XML format, which should be fairly self-explanatory when read in conjunction with the diagram above.

    <programlisting>
<![CDATA[
<items>
  <item id="1" class="http://www.intermine.org/model/testmodel#Department">
    <attribute name="name" value="DepartmentA1"/>
    <reference name="manager" ref_id="2"/>
    <collection name="employees">
      <reference ref_id="2"/>
      <reference ref_id="3"/>
    </collection>
  </item>
  <item id="2" class="http://www.intermine.org/model/testmodel#Manager">
    <attribute name="name" value="EmployeeA1"/>
    <attribute name="fullTime" value="true"/>
    <attribute name="age" value="10"/>
    <attribute name="title" value="Head of marketing"/>
    <reference name="address" ref_id="4"/>
    <reference name="department" ref_id="1"/>
  </item>
  <item id="3" class="http://www.intermine.org/model/testmodel#Employee">
    <attribute name="name" value="EmployeeA2"/>
    <attribute name="fullTime" value="true"/>
    <attribute name="age" value="20"/>
    <reference name="address" ref_id="4"/>
    <reference name="department" ref_id="1"/>
  </item>
  <item id="4" class="http://www.intermine.org/model/testmodel#Address">
    <attribute name="address" value="Employee Street, AVille"/>
  </item>
</items>
]]>
    </programlisting>
  </para>

  <para>
    Given this data, the model, and some extra configuration information InterMine is capable of storing the data in a relational database. The data is subsequently accessible using an object-oriented query language that returns Java objects representing the data. The system is capable of exposing the datastore to web users using an HTML interface, and other remote users using a SOAP interface. Ultimately this means that whilst the prerequisites for building an InterMine database include the installation of a relational database (PostgreSQL) and a Java runtime, end users can simply use a web browser or a simple Java API (which accepts queries in object-oriented, or OQL-like format) to access the data.
  </para>

  <para>
    A <ulink url="/begin.do">demo</ulink> of the web interface, built using a superset of the data above, is publicly accessible. Help is available by clicking on the relevant links.
  </para>

  <para>
    Also available is a Java client for a demo of the SOAP interface. If you have a Java runtime installed, simply add the .jar file to your CLASSPATH and run java org.intermine.objectstore.query.iql.IqlShell, which will display a shell to OQL-like queries remotely against the InterMine demo database. For some suitable queries to run consult <ulink url="../howto_query.xml">"How to query InterMine"</ulink>. It is also possible to use this .jar file to build and run queries from Java using the full API.
  </para>

</article>
