<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <articleinfo>
    <date>2003-10-14</date>

    <title>Converting Source Ontologies to OWL</title>

    <authorgroup>
      <author>
        <firstname>Richard</firstname>

        <surname>Smith</surname>
      </author>
    </authorgroup>
  </articleinfo>

  <para>The InterMine merged ontology is an OWL format file created by merging
  OWL versions of all source ontologies (an overview of the process can be
  found <ulink url="overview.xml">here</ulink>. For merging to take place each
  source ontology must first be converted into OWL format, this document
  describes the translation of source formats (currently DAG and Daml) into
  OWL.</para>

  <section>
    <title>Converting DAG to OWL</title>

    <itemizedlist>
      <listitem>
        <para>Used for: Sequence Ontology (SO), Gene Ontology (GO)</para>
      </listitem>

      <listitem>
        <para>Java class: org.intermine.ontology.Dag2Owl</para>
      </listitem>

      <listitem>
        <para>Related classes: org.intermine.ontology.DagParser,
        org.intermine.ontology.DagTerm, org.intermine.ontology.DagValidator,
        jena.jar</para>
      </listitem>

      <listitem>
        <para>To run: (see below)</para>
      </listitem>
    </itemizedlist>

    <para>A DAG file is parsed using
    <literal>org.intermine.DagParser</literal> which reads a DAG document into
    a simple tree of <literal>org.intermine.ontology.DagTerm</literal>
    objects. The return of the <literal>DagParser</literal>
    <command>process()</command> method is a <literal>Set</literal> of root
    <literal>DagTerm</literal>s in the file. The resulting tree is validated
    by <literal>org.intermine.ontology.DagValidator</literal> and converted to
    OWL format by <literal>org.intermine.ontology.Dag2Owl</literal>.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>DAG Validation:</emphasis></para>

        <para>The <literal>DagValidator</literal> checks for a number of
        errors/potential problems with the source DAG file and makes output
        available by <command>getOutput()</command>. Nothing is done to
        correct and problems and they do not stop the source file from being
        converted to OWL. Specific tests:</para>

        <itemizedlist>
          <listitem>
            <para><emphasis>Duplicate names for id</emphasis> - DAG terms are
            defined by a name and assigned an id, each pairing can apear
            multiple times in a DAG file so check for an id that is assigned
            to more than one name string.</para>
          </listitem>

          <listitem>
            <para><emphasis>Duplicate ids for name</emphasis> - as above,
            checking for name strings that are assigned more than one
            id.</para>
          </listitem>

          <listitem>
            <para><emphasis>Orphan part-ofs</emphasis> - a DAG term may
            defined in a part-of relationship without being defined elsewhere
            by an is-a relationship. This is not necessarily incorrect (?) but
            makes the meaning of the structure difficult to interpret and
            convert to OWL</para>
          </listitem>

          <listitem>
            <para><emphasis>Synonyms that are terms</emphasis> - DAG terms may
            have synonyms assigned to them, if any of the synonyms are defined
            elsewhere as terms this is possibly an error (i.e. the same term
            defined multiple times but are actually synonyms). Such cases may
            need to be treated differently in OWL generation.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Conversion to OWL</emphasis></para>

        <para>Each DAG term is converted to an owl:class, two types of
        relationship exist:</para>

        <itemizedlist>
          <listitem>
            <para>is-a - describes a parent/child relationship. In OWL the
            child is defined to be an owl:subclassOf the parent
            owl:class.</para>
          </listitem>

          <listitem>
            <para>part-of - used to state that a particular term is a
            component of another. We translate this to mean that the parent
            owl:class has a property which is a collection of the 'parts' i.e.
            other owl:classes.</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para><emphasis>Running Dag2Owl</emphasis></para>

        <para>Until a formal method for converting source ontologies the java
        can be run directly by the following (where $INTERMINE is the root of
        the intermine cvs tree):</para>

        <itemizedlist>
          <listitem>
            <para><command>cd $INTERMINE/build/java</command></para>
          </listitem>

          <listitem>
            <para><command>java -classpath
            $JIKESPATH:$INTERMINE/lib/jena.jar:$INTERMINE/lib/log4j.jar:$INTERMINE/lib/icu4j.jar:$INTERMINE/lib/jakarta-oro.jar:.
            org.intermine.ontology.Dag2Owl source_file.dag target_file.owl
            errorFile</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Converting Daml+Oil to OWL</title>

    <itemizedlist>
      <listitem>
        <para>Used for: MGED Ontology</para>
      </listitem>

      <listitem>
        <para>Java class: org.intermine.ontology.Daml2Owl</para>
      </listitem>

      <listitem>
        <para>Related classes: jena.jar</para>
      </listitem>

      <listitem>
        <para>To run: (see below)</para>
      </listitem>
    </itemizedlist>

    <para>Daml+Oil is converted to OWL by simple text replacement of Daml
    specific terms with corresponding OWL ones, eg. daml:class -&gt;
    owl:class, daml:sameClassAs -&gt; owl:equivalentClass,
    daml:UnambigiuousProperty -&gt; owl:inverseFunctionalProperty. Terms that
    are part of the rdf(s) vocubaluary are not altered. Some level of
    validation is inherent in creating a jena OntModel class, running an OWL
    validator may be advisable.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>Running Daml2Owl</emphasis></para>

        <para>Until a formal method for converting source ontologies the java
        can be run directly by the following (where $INTERMINE is the root of
        the intermine cvs tree):</para>

        <itemizedlist>
          <listitem>
            <para><command>cd $INTERMINE/build/java</command></para>
          </listitem>

          <listitem>
            <para><command>java -classpath
            $JIKESPATH:$INTERMINE/lib/jena.jar:$INTERMINE/lib/log4j.jar:$INTERMINE/lib/icu4j.jar:$INTERMINE/lib/jakarta-oro.jar:.
            org.intermine.ontology.Daml2Owl source_file.daml
            target_file.owl</command></para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
</article>