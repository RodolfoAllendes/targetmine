<?xml version="1.0"?>

<article>
  
  <artheader>
    <date>2003-10-14</date>
    <title>Converting Source Ontologies to OWL</title>
    <authorgroup>
      <author>
        <firstname>Richard</firstname>
        <surname>Smith</surname>
      </author>
    </authorgroup>
  </artheader>
  
  <para>
    The InterMine merged ontology is an OWL format file created by merging OWL versions of all source ontologies (an overview of the process can be found <ulink url="overview.xml">here</ulink>.  For merging to take place each source ontology must first be converted into OWL format, this document describes the translation of source formats (currently DAG and Daml) into OWL.
  </para>

  <sect1>
    <title>Converting DAG to OWL</title>
    <para>
      <itemizedlist>
        <listitem>Used for: Sequence Ontology (SO), Gene Ontology (GO)</listitem>
        <listitem>Java class: org.intermine.ontology.Dag2Owl</listitem>
        <listitem>Related classes: org.intermine.ontology.DagParser, org.intermine.ontology.DagTerm, org.intermine.ontology.DagValidator, jena.jar</listitem>
        <listitem>To run: (see below)</listitem>
      </itemizedlist>
    </para>
   
    <para>
       A DAG file is parsed using <classname>org.intermine.DagParser</classname> which reads a DAG document into a simple tree of <classname>org.intermine.ontology.DagTerm</classname> objects.  The return of the <classname>DagParser</classname> <function>process()</function> method is a <classname>Set</classname> of root <classname>DagTerm</classname>s in the file.  The resulting tree is validated by <classname>org.intermine.ontology.DagValidator</classname> and converted to OWL format by <classname>org.intermine.ontology.Dag2Owl</classname>.  
      </para>
      <sect2>
        <title>DAG Validation</title>
        The <classname>DagValidator</classname> checks for a number of errors/potential problems with the source DAG file and makes output available by <function>getOutput()</function>.  Nothing is done to correct and problems and they do not stop the source file from being converted to OWL.  Specific tests:
          <itemizedlist>
            <listitem><highlights>Duplicate names for id</highlights> - DAG terms are defined by a name and assigned an id, each pairing can apear multiple times in a DAG file so check for an id that is assigned to more than one name string.</listitem>
            <listitem><highlights>Duplicate ids for name</highlights> - as above, checking for name strings that are assigned more than one id.</listitem>
            <listitem><highlights>Orphan part-ofs</highlights> - a DAG term may defined in a part-of relationship without being defined elsewhere by an is-a relationship.  This is not necessarily incorrect (?) but makes the meaning of the structure difficult to interpret and convert to OWL </listitem>
            <listitem><highlights>Synonyms that are terms</highlights> - DAG terms may have synonyms assigned to them, if any of the synonyms are defined elsewhere as terms this is possibly an error (i.e. the same term defined multiple times but are actually synonyms).  Such cases may need to be treated differently in OWL generation.</listitem>
          </itemizedlist>
     </sect2>

     <sect2>
       <title>Conversion to OWL</title>
       Each DAG term is converted to an owl:class, two types of relationship exist:
       <itemizedlist>
         <listitem>is-a - describes a parent/child relationship.  In OWL the child is defined to be an owl:subclassOf the parent owl:class.</listitem>
         <listitem>part-of - used to state that a particular term is a component of another.  We translate this to mean that the parent owl:class has a property which is a collection of the 'parts' i.e. other owl:classes.</listitem> 
       </itemizedlist>
     </sect2>

     <sect2>
       <title>Running Dag2Owl</title>
       Until a formal method for converting source ontologies the java can be run directly by the following (where $INTERMINE is the root of the intermine cvs tree):
      <itemizedlist>
        <listitem><command>cd $INTERMINE/build/java</command></listitem>
        <listitem><command>java -classpath $JIKESPATH:$INTERMINE/lib/jena.jar:$INTERMINE/lib/log4j.jar:$INTERMINE/lib/icu4j.jar:$INTERMINE/lib/jakarta-oro.jar:. org.intermine.ontology.Dag2Owl source_file.dag target_file.owl errorFile</command></listitem>
      </itemizedlist>
    </sect2>

  </sect1>

   <sect1>
    <title>Converting Daml+Oil to OWL</title>
    <para>
      <itemizedlist>
        <listitem>Used for: MGED Ontology</listitem>
        <listitem>Java class: org.intermine.ontology.Daml2Owl</listitem>
        <listitem>Related classes: jena.jar</listitem>
        <listitem>To run: (see below)</listitem>
      </itemizedlist>
    </para>

    <para>
      Daml+Oil is converted to OWL by simple text replacement of Daml specific terms with corresponding OWL ones, eg. daml:class -> owl:class, daml:sameClassAs -> owl:equivalentClass, daml:UnambigiuousProperty -> owl:inverseFunctionalProperty.  Terms that are part of the rdf(s) vocubaluary are not altered.  Some level of validation is inherent in creating a jena OntModel class, running an OWL validator may be advisable.
    </para>
    <sect2>
      <title>Running Daml2Owl</title>
      Until a formal method for converting source ontologies the java can be run directly by the following (where $INTERMINE is the root of the intermine cvs tree):
      <itemizedlist>
        <listitem><command>cd $INTERMINE/build/java</command></listitem>
        <listitem><command>java -classpath $JIKESPATH:$INTERMINE/lib/jena.jar:$INTERMINE/lib/log4j.jar:$INTERMINE/lib/icu4j.jar:$INTERMINE/lib/jakarta-oro.jar:. org.intermine.ontology.Daml2Owl source_file.daml target_file.owl</command></listitem>
      </itemizedlist>
    </sect2>
  </sect1> 
</article>
