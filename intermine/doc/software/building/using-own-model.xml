<?xml version="1.0"?>
<article>
  <artheader>
        <date>2003-06-30</date>
	<title>Basic database creation tutorial</title>
  </artheader>

 <sect1>
     <para>The tutorial demonstrates how to create a database of your own using the intermine software, and assumes that you have created the tutorial model.</para>


<para>
<orderedlist>
<para>
<listitem>Create a database using PosgreSQL and assign it a name of your choice - this will be referred to as 'yourdb'.</listitem>
</para>
<para>
<listitem>Determine how your data is related e.g. Each gene has one or many exons etc...</listitem>
</para>
<para>
<listitem>Once the relationships are determined create a UML diagram using ArgoUML, an example is included in <command>model/testmodel.zargo</command>. Here are some pointers for using ArgoUML to create a model:</listitem>

	<orderedlist>
	<listitem>To define the properties of the attributes of your classes you must physically select that property even though it may be preselected. For example if the propety you are setting is the type - 'String' then you must select 'String' from the dropdown list. It will be apparent that you have done this because the property will now be displayed in your uml diagram i.e. "name" will become "name : String".</listitem>

	<listitem>All attributes must be set to protected in the properties.  The UML will now show "#name : String".</listitem>

	<listitem>The type of each attribute must be selected from the range at the bottom of the list, (see below) with the exception of 'String' you must not use ArgoUML's own types.</listitem>
<table>
    <tbody>
        <row>
	  <entry>
	      <inlinegraphic fileref="argotype.gif"/>
	  </entry>
	</row>
    </tbody>
</table>

	</orderedlist>
</para>
<para>
<listitem>The data will need to be extracted from the file it is currently stored in and put into a format that the InterMine software can use - this is either XML or Java objects.  It is recommended that you write a program using java to perform this task. In this program you should add in the code fom the example included here: <command>src/java/org/intermine/tutorial/SimpleDataLoader</command>. The example demonstrates how to read and write to the database using the objectstore writer.</listitem>
</para>
<para>
<listitem>Personalise the settings in the InterMine program files to accomodate your data:</listitem>

	 <orderedlist>
	 <listitem>In the tutorial directory, modify the <command>intermine.properties</command> configuration file using any simple text editor you are comfortable with (e.g. emacs or notepad). The modifications should contain your database username (and password if necessary), and the name of your database should replace the tutorial one on the following line <command>db.tutorial.datasource.databaseName=tutorial</command> to become <command>db.tutorial.datasource.databaseName=yourdb</command>.</listitem>

	 <listitem>Also in the <command>intermine.properties</command> file the line <command>os.tutorial.model=<italic>tutorial</italic></command> should be changed so that it equals the name of your ArgoUML model.</listitem>

	 <listitem>In <command>build.xml</command> you need to follow the instructions on how to build a model from a zargo file in the code comments and using the comment marks comment out the <command>build-from-xml-model</command> area of code.</listitem>

<table>
    <tbody>
        <row>
	  <entry>
	      <inlinegraphic fileref="build.gif"/>
	  </entry>
	</row>
    </tbody>
</table>

	 <listitem> Back in <command>build.xml</command> the <command>insert data into the database</command> section now needs to be changed: First you must change the depends statement at the top of the target (see below). It should now read <command> depends="build-model, compile"</command>.</listitem>
	 <listitem>The rest of that target now needs to be modified to accept the data from the java program you have created. Below is an exampe of how to do this, but obviously this will be specific to your programs.</listitem>

<table>
    <tbody>
        <row>
	  <entry>
	      <inlinegraphic fileref="insert.gif"/>
	  </entry>
	</row>
    </tbody>
</table>

	 </orderedlist>
         </para>

       <listitem>The final step is to enter on the command line <command>ant clean run</command>. The build should be successful, however you may get a compile error for <command>SimpleQuery</command> as this test will no longer work with your database.</listitem>
      
       <para>
       <listitem>You should now find all your data has been entered into yourdb.</listitem>
       </para>
      </orderedlist>

      
    </para>
  </sect1>
</article>
